"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dataForge = require("data-forge");
var data_forge_1 = require("data-forge");
require("./direction");
function streaks(period) {
    if (period === void 0) { period = 2; }
    return this.direction(period)
        .groupSequentialBy(function (direction) { return direction; })
        .selectMany(function (group) {
        var direction = group.first();
        if (direction === 0) {
            return dataForge.replicate(0, group.count())
                .withIndex(group.getIndex()) //TODO: Select many should respect the index!
                .toPairs();
        }
        else if (direction < 0) {
            return dataForge.range(1, group.count())
                .select(function (value) { return -value; }) //TODO: DF should be able to do a negative range.
                .withIndex(group.getIndex()) //TODO: Select many should respect the index!
                .toPairs();
        }
        else {
            return dataForge.range(1, group.count())
                .withIndex(group.getIndex()) //TODO: Select many should respect the index!
                .toPairs();
        }
    })
        .withIndex(function (pair) { return pair[0]; })
        .select(function (pair) { return pair[1]; })
        .bake(); //TODO: This is really expensive so back the result!
}
data_forge_1.Series.prototype.streaks = streaks;
//# sourceMappingURL=streaks.js.map
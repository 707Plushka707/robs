"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var data_forge_1 = require("data-forge");
function trends() {
    var extrema = this.extrema();
    var df = this.inflate(function (value) { return ({
        Value: value
    }); })
        .withSeries("extrema", extrema);
    var downTrend = df
        .where(function (row) { return row.extrema > 0; })
        .rollingWindow(2)
        .select(function (window) {
        if (window.count() < 2) {
            return [window.getIndex().last(), 0];
        }
        var prev = window.first();
        var cur = window.last();
        if (cur.Value < prev.Value) {
            return [window.getIndex().last(), -1];
        }
        return [window.getIndex().last(), 1];
    })
        .withIndex(function (pair) { return pair[0]; })
        .select(function (pair) { return pair[1]; })
        .bake();
    var upTrend = df
        .where(function (row) { return row.extrema < 0; })
        .rollingWindow(2)
        .select(function (window) {
        if (window.count() < 2) {
            return [window.getIndex().last(), 0];
        }
        var prev = window.first();
        var cur = window.last();
        if (cur.Value > prev.Value) {
            return [window.getIndex().last(), 1];
        }
        return [window.getIndex().last(), -1];
    })
        .withIndex(function (pair) { return pair[0]; })
        .select(function (pair) { return pair[1]; })
        .bake();
    var prevTrendValue = undefined;
    return df
        .withSeries("Uptrend", upTrend)
        .withSeries("Downtrend", downTrend)
        .deflate(function (row) { return row.Uptrend && row.Uptrend || row.Downtrend; })
        .select(function (value) {
        if (typeof (value) === "number" && value < 0 || value > 0) {
            prevTrendValue = value;
            return value;
        }
        else {
            return prevTrendValue;
        }
    })
        .bake();
}
data_forge_1.Series.prototype.trends = trends;
//# sourceMappingURL=trends.js.map
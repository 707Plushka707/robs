"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var data_forge_1 = require("data-forge");
/**
 * Compute bollinger bands for a input series for a specified period of time.
 *
 * @param period - The time period for which to compute bollinger bands.
 * @param stdDevMultUpper - The multiple of std dev used to compute the upper band.
 * @param stdDevMultLower - The multiple of std dev used to compute the lower band.
 *
 * @returns Returns a dataframe with columns value, upper, middle, lower, and stddev.
 */
function bollinger(period, stdDevMultUpper, stdDevMultLower) {
    chai_1.assert.isNumber(period, "Expected 'period' parameter to 'Series.bollinger' to be a number that specifies the time period of the moving average.");
    chai_1.assert.isNumber(stdDevMultUpper, "Expected 'stdDevMultUpper' parameter to 'Series.bollinger' to be a number that specifies multipler to compute the upper band from the standard deviation.");
    chai_1.assert.isNumber(stdDevMultLower, "Expected 'stdDevMultLower' parameter to 'Series.bollinger' to be a number that specifies multipler to compute the upper band from the standard deviation.");
    return this.rollingWindow(period)
        .select(function (window) {
        var avg = window.average();
        var stddev = window.std();
        var bollingerRecord = {
            value: window.last(),
            middle: avg,
            upper: avg + (stddev * stdDevMultUpper),
            lower: avg - (stddev * stdDevMultLower),
        };
        return [
            window.getIndex().last(),
            bollingerRecord
        ];
    })
        .withIndex(function (pair) { return pair[0]; })
        .inflate(function (pair) { return pair[1]; });
}
;
data_forge_1.Series.prototype.bollinger = bollinger;
//# sourceMappingURL=bollinger.js.map